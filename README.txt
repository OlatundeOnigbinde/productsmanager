The application Backend (BE) is built with Spring Boot and uses a MariaDB/MySQL database.

1. Steps to setup the MariaDB/MySQL database:

	create a database user with the following details
	a: user name: productmanageruser
	b: password: productmanager 
	c: log in with the user created above and create a database with the following details
	d: schema: product_manager_db
	

	NOTE: Alternatively, the database user values can be modified in the application.yml file located in the BE folder.
		  The MariaDB/MySQL database is configured to listen on the default port 3306. this can also be modified in the application.yml file located in the {project-home}/src/main/resources folder.

2. Steps to run the backend module:
	a: The backend module has been configured to run on port 8082, however the port can be modified in the application.yml file located in the {project-home}/src/main/resources folder
	b: The application can be installed as a service or deployed in a container,
	however for the purpose of this assessment,
	Run the project from the main class ProductsmanagerApplication.java in your IDE
	OR
	Run in cmd using command "java -jar productsmanager-0.0.1-SNAPSHOT.jar".
	NOTE: Upon successful startup: 
		The database tables will be created. 
		The test data (provided in the categories.csv and products.csv) will be populated in the database.
		A sample user will also be created
		The logs are written in {project-home}/logs/product-manager.log

3. Other Design considerations AS-IS(What has been implemented) and TO-BE(What would have been done differently):
	a: Session management: 
		AS-IS: With the current implementation, a session token is generated by the BE, saved to the database and sent as a response after a successful login. 
        The FE is expected to pass the session token as a header parameter for Subsequent API calls. This is used to validate the users session.
		TO-BE: Users sessions will be stored in Redis for better session management.
   
   
	b: User management:
		The BE module exposes an API for user registration. A feature would be developed in the FE to create users and assign roles to the users.
	
	c: Micro services Architecture:
		The system currently has seperate components for the FE and BE. However, the BE can be split into different microservices, i.e:
		- User management service
		- Product/Inventory management service
		- Order management/Payment module: to handle real time purchases and update Product/Inventory management service
		- API gateway: to accept all incoming requests and route to the appropriate microservice.

	d: Deployment:
		The system will be deployed in a Docker Container
   
	e: User Stories implemented:
	   - Ability to see all products
	   - Ability to sort the products by name by clicking on the datatable header
	   - Ability to filter by category by selecting a category on the search interface
	   - Ability to page results (5, 10 and 20)
	   - Ability to add a new product
	   - Ability to delete a product
	   - Ability to register a new user(BE only)
	   - Ability to fetch a product by Id
	   - Ability to create a new category(BE only)